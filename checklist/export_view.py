from django.http import HttpResponse
from django.views import View
from .models import Procedure


class ExportChecklistView(View):
    LINE_BREAK = "\r\n"

    def make_header_lines(self):
        return """
######################################## COLOUR DEFINES ########################################################\r
sw_define_colour:white:0.9,0.9,0.9\r
sw_define_colour:grey:0.6,0.6,0.6\r
################################################################################################################\r
sw_checklist: Checklist generated by fly.vdwaal.net\r
################################################################################################################\r
sw_itemvoid_c:\white\                   SMART PROCEDURES CHECKLIST\r
sw_itemvoid_c:\grey\                   FOR ZIBO AND XCHECKLIST\r
sw_itemvoid_c:\grey\                   SPECIAL THANKS TO SkyMatix\r
sw_itemvoid:\r
sw_itemvoid:\r
sw_itemvoid_c:\grey\                INSPIRED BY checklist by VIN_KAIZEN\r
sw_itemvoid:\r
sw_itemvoid::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\r
sw_item_c:CONTINUE TO CHECKLISTS|\r
################################################################################################################\r
sw_continue\r
################################################################################################################\r
"""

    def make_procedure_lines(self, procedure):
        lines = []
        lines.append("#" * 112 + self.LINE_BREAK)
        lines.append(
            f"sw_checklist:{procedure.title}:{procedure.title}{self.LINE_BREAK}"
        )
        lines.append("#" * 112 + self.LINE_BREAK)
        if procedure.show_expression:
            lines.append(f"sw_show:{procedure.show_expression}{self.LINE_BREAK}")
        return lines

    def make_end_procedure_lines(self, procedure):
        lines = []
        if procedure.auto_continue:
            lines.append("#" * 112 + self.LINE_BREAK)
            lines.append(f"sw_continue{self.LINE_BREAK}")
        lines.append("#" * 112 + self.LINE_BREAK * 4)
        return lines

    def make_item_lines(self, item):
        lines = []
        if item.get_action_label() == "VOID":
            lines.append(
                f"sw_itemvoid_c:\white\{item.item}\grey\, {item.setting}{self.LINE_BREAK}"
            )
        else:
            lines.append(
                f"sw_item_c:\white\{item.item}\grey\, {item.setting}|{item.get_action_label()}"
            )
            if item.dataref_expression:
                lines.append(f":{item.dataref_expression}{self.LINE_BREAK}")
            else:
                lines.append(self.LINE_BREAK)
        return lines

    def get(self, request, *args, **kwargs):
        # Create the HttpResponse object with the appropriate text header.
        response = HttpResponse(
            content_type="text/plain",
            headers={"Content-Disposition": 'attachment; filename="clist.txt"'},
        )

        lines = []
        lines.append(self.make_header_lines())

        procedures = Procedure.objects.prefetch_related("checkitem_set").order_by(
            "step"
        )
        for procedure in procedures:
            procedure_lines = self.make_procedure_lines(procedure)
            item_lines = []

            for checkitem in procedure.checkitem_set.order_by("step"):
                if checkitem.shouldshow(request.session.get("attrib", [])):
                    item_lines.extend(self.make_item_lines(checkitem))

            # Add procedure lines only if there are items to show
            if item_lines:  # Skip empty procedures
                lines.extend(procedure_lines)
                lines.extend(item_lines)
                lines.extend(self.make_end_procedure_lines(procedure))

        response.writelines(lines)
        return response
